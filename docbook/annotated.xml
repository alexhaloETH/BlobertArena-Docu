<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_struct_pvp_actions_contract_1_1_accept_response_struct">PvpActionsContract.AcceptResponseStruct</link><link linkend="_class_logic_layer_1_1_query_1_1_affect_data">LogicLayer.Query.AffectData</link><link linkend="_class_blobert_arena_1_1_animations_1_1_amma_animation_controller">BlobertArena.Animations.AmmaAnimationController</link><link linkend="_class_a_m_m_a_blobert">AMMABlobert</link><link linkend="_class_amma_switch_button">AmmaSwitchButton</link>
<para>Script to manage the switch between BlobArena and AMMA </para>
<link linkend="_class_animated_arrow">AnimatedArrow</link>
<para>Class for an animated arrow that can be parameterised </para>
<link linkend="_class_animation_data_editor">AnimationDataEditor</link><link linkend="_struct_blobert_arena_1_1_animations_1_1_blobert_animation_controller_1_1_animation_data_trait_blobert">BlobertArena.Animations.BlobertAnimationController.AnimationDataTraitBlobert</link><link linkend="_struct_logic_layer_1_1_world_data_model_1_1_attack_anim_data">LogicLayer.WorldDataModel.AttackAnimData</link><link linkend="_struct_battle_page_controller_1_1_attack_availability">BattlePageController.AttackAvailability</link><link linkend="_struct_pvp_actions_contract_1_1_attack_struct">PvpActionsContract.AttackStruct</link><link linkend="_class_audio_manager">AudioManager</link>
<para>Manager class for both music and audio effects (SINGLETON) </para>
<link linkend="_class_available_attack">AvailableAttack</link><link linkend="_class_base_button">BaseButton</link><link linkend="_class_blobert_arena_1_1_theme_manager_1_1_base_button_skin_listener">BlobertArena.ThemeManager.BaseButtonSkinListener</link><link linkend="_class_battle_page_card_stats_component">BattlePageCardStatsComponent</link><link linkend="_class_battle_page_controller">BattlePageController</link>
<para>Flow of one round </para>
<link linkend="_class_blob_data_background_blob_dex_component">BlobDataBackgroundBlobDexComponent</link>
<para>Sets the background of the blob data component </para>
<link linkend="_class_blobert_arena_1_1_blob_dex_1_1_blob_data_manager_blob_dex_component">BlobertArena.BlobDex.BlobDataManagerBlobDexComponent</link><link linkend="_class_blobert_arena_1_1_blob_dex_1_1_blob_data_standard_objects_blob_dex_component">BlobertArena.BlobDex.BlobDataStandardObjectsBlobDexComponent</link><link linkend="_class_blobert_arena_1_1_blob_dex_1_1_blob_dex_list_component">BlobertArena.BlobDex.BlobDexListComponent</link><link linkend="_class_blobert_arena_1_1_blob_dex_1_1_blob_dex_list_element">BlobertArena.BlobDex.BlobDexListElement</link><link linkend="_class_blobering_animation">BloberingAnimation</link>
<para>Blobering animation class to create the hovering question mark effect, and the text ellipses </para>
<link linkend="_class_blobert_effects_animation_component">BlobertEffectsAnimationComponent</link><link linkend="_class_blobert_types">BlobertTypes</link><link linkend="_class_blob_hints">BlobHints</link><link linkend="_class_build_script">BuildScript</link><link linkend="_class_button_manager_battle_page_component">ButtonManagerBattlePageComponent</link><link linkend="_struct_notification_component_manager_1_1_button_struct">NotificationComponentManager.ButtonStruct</link><link linkend="_struct_blobert_arena_1_1_theme_manager_1_1_base_button_skin_listener_1_1_button_type">BlobertArena.ThemeManager.BaseButtonSkinListener.ButtonType</link><link linkend="_struct_byte_array">ByteArray</link><link linkend="_class_blobert_arena_1_1_animations_1_1_character_animation_manager">BlobertArena.Animations.CharacterAnimationManager</link><link linkend="_class_character_stats_visualizer_component">CharacterStatsVisualizerComponent</link>
<para>This component is responsible for displaying the values of a Blobert in the UI </para>
<link linkend="_class_chatting_pop_up_component">ChattingPopUpComponent</link><link linkend="_class_choice_section_battle_page">ChoiceSectionBattlePage</link><link linkend="_class_choose_blobert_for_tournament_page_behaviour">ChooseBlobertForTournamentPageBehaviour</link>
<para>This first of all should connect to the blob dex component, then when the LFG button is pressed it should send the selected blobert to the tournament api, ofcourse the button shouold be disabled if the user hasnt selected a blobert </para>
<link linkend="_class_click_on_specific_trait_component">ClickOnSpecificTraitComponent</link><link linkend="_class_java_script_utils_1_1_clipboard_helper">JavaScriptUtils.ClipboardHelper</link><link linkend="_class_combat_animations">CombatAnimations</link><link linkend="_class_combatant_info">CombatantInfo</link><link linkend="_class_combatant_info_1_1_combatant_info_data_query">CombatantInfo.CombatantInfoDataQuery</link><link linkend="_class_combatant_state">CombatantState</link><link linkend="_class_combatant_state_1_1_combatant_state_data_query">CombatantState.CombatantStateDataQuery</link><link linkend="_class_combatant_stats">CombatantStats</link><link linkend="_class_combatant_stats_1_1_combatant_stats_data_query">CombatantStats.CombatantStatsDataQuery</link><link linkend="_class_combat_bag_button">CombatBagButton</link><link linkend="_class_combat_log_battle_page_component">CombatLogBattlePageComponent</link><link linkend="_struct_pvp_actions_contract_1_1_commit_attack_struct">PvpActionsContract.CommitAttackStruct</link><link linkend="_class_commitment">Commitment</link><link linkend="_class_commitment_1_1_commitment_data_query">Commitment.CommitmentDataQuery</link><link linkend="_class_contact_us">ContactUs</link>
<para>Class to hold social media handles and contact information </para>
<link linkend="_class_dojo_contract_communication_1_1_contract_call">DojoContractCommunication.ContractCall</link><link linkend="_class_counter">Counter</link>
<para>Class to manage a simple counter object </para>
<link linkend="_struct_pvp_admin_actions_contract_1_1_create_challenge_struct">PvpAdminActionsContract.CreateChallengeStruct</link><link linkend="_class_current_mode_component">CurrentModeComponent</link><link linkend="_class_cursor_manager">CursorManager</link>
<para>Manager class for the cursor and the virtual cursor </para>
<link linkend="_class_custom_polygon_graph_u_i">CustomPolygonGraphUI</link><link linkend="_class_logic_layer_1_1_query_1_1_damage_data">LogicLayer.Query.DamageData</link><link linkend="_struct_damage_result">DamageResult</link><link linkend="_struct_tournament_list_page_behaviour_1_1_data">TournamentListPageBehaviour.Data</link>
<para>Intermediate struct, holding the list of all the tournaments </para>
<link linkend="_class_logic_layer_1_1_models_1_1_local_data_model_1_1_dojo_data">LogicLayer.Models.LocalDataModel.DojoData</link><link linkend="_class_logic_layer_1_1_models_1_1_local_data_model_1_1_dojo_data_serializable">LogicLayer.Models.LocalDataModel.DojoDataSerializable</link><link linkend="_class_dropdown_main_menu">DropdownMainMenu</link><link linkend="_class_logic_layer_1_1_query_1_1_edge">LogicLayer.Query.Edge&lt; T &gt;</link><link linkend="_struct_effect">Effect</link><link linkend="_class_effect_player">EffectPlayer</link>
<para>Simple animation player script, it plays the provided sprites in order, then destroys the holding game object. The purpose is to allow ourselves creating several animation prefabs that play a one shot animation in a fire and forget style </para>
<link linkend="_struct_effect_result">EffectResult</link><link linkend="_struct_dojo_contract_communication_1_1_empty_transaction_struct">DojoContractCommunication.EmptyTransactionStruct</link><link linkend="_class_end_of_battle">EndOfBattle</link>
<para>The manager of the End of Battle sequence </para>
<link linkend="_struct_dojo_contract_communication_1_1_endpoint_dojo_call_struct">DojoContractCommunication.EndpointDojoCallStruct</link><link linkend="_class_logic_layer_1_1_query_1_1_entity">LogicLayer.Query.Entity&lt; T &gt;</link><link linkend="_class_exit_dialogue">ExitDialogue</link>
<para>Manager class to the exit dialogue panel </para>
<link linkend="_struct_field_layout">FieldLayout</link><link linkend="_struct_pvp_actions_contract_1_1_forfeit_struct">PvpActionsContract.ForfeitStruct</link><link linkend="_class_game_background_component">GameBackgroundComponent</link><link linkend="_class_game_manager">GameManager</link><link linkend="_class_graphing_system_blob_data_blob_dex_component">GraphingSystemBlobDataBlobDexComponent</link><link linkend="_class_has_attack">HasAttack</link><link linkend="_class_has_attack_1_1_has_attack_data_query">HasAttack.HasAttackDataQuery</link><link linkend="_class_logic_layer_1_1_query_1_1_hit_data">LogicLayer.Query.HitData</link><link linkend="_struct_i_damage">IDamage</link><link linkend="_interface_logic_layer_1_1_query_1_1_i_data">LogicLayer.Query.IData</link><link linkend="_interface_i_lobby_list_element">ILobbyListElement</link><link linkend="_interface_i_nft_type">INftType</link>
<para>Defines the interface for NFT types, providing a blueprint for methods and properties to handle statistics, items, traits, ownership, and other NFT-related functionalities </para>
<link linkend="_class_in_lobby_controller">InLobbyController</link>
<para>This is the lobby page, the user is only allowed here if the invite he sent or received has been accepted </para>
<link linkend="_class_in_lobby_ongoing_lobby_list_page_element">InLobbyOngoingLobbyListPageElement</link><link linkend="_class_interactable_text_component">InteractableTextComponent</link><link linkend="_class_inv_sent_on_going_lobby_list_page_element">InvSentOnGoingLobbyListPageElement</link><link linkend="_interface_i_selection_behaviour">ISelectionBehaviour</link><link linkend="_interface_i_skin_listener">ISkinListener</link><link linkend="_struct_i_stat">IStat</link><link linkend="_class_item">Item</link><link linkend="_struct_logic_layer_1_1_world_data_model_1_1_item_data">LogicLayer.WorldDataModel.ItemData</link><link linkend="_class_item_1_1_item_data_query">Item.ItemDataQuery</link><link linkend="_struct_pvp_actions_contract_1_1_kick_inactive_player_struct">PvpActionsContract.KickInactivePlayerStruct</link><link linkend="_class_last_mint">LastMint</link>
<para>Model from the backend thats stores the timestamp of the last mint of the specific player </para>
<link linkend="_class_last_mint_1_1_last_mint_data_query">LastMint.LastMintDataQuery</link><link linkend="_class_blobert_arena_1_1_blob_dex_1_1_leader_board_blob_data_blod_dex_component">BlobertArena.BlobDex.LeaderBoardBlobDataBlodDexComponent</link><link linkend="_class_leader_board_page_behaviour">LeaderBoardPageBehaviour</link>
<para>This page is done, the only thing that is theoretically missing is that when the user clicks on one of the Bloberts it should show the informations of that blobert, that component is still not implemented </para>
<link linkend="_class_leader_board_ranking_element">LeaderBoardRankingElement</link><link linkend="_class_load_version_manager">LoadVersionManager</link><link linkend="_class_lobby_list_page_behaviour">LobbyListPageBehaviour</link>
<para>This should list all of the lobbies in their current states also should be able to update in real time </para>
<link linkend="_class_lobby_main_menu_page_behaviour">LobbyMainMenuPageBehaviour</link>
<para>Main <link linkend="_class_menu">Menu</link> for the lobby nothing interesting here </para>
<link linkend="_class_login_page_behaviour">LoginPageBehaviour</link>
<para>The Login screen initially should have an animation at the start which it has yet to be implemented </para>
<link linkend="_class_login_to_main_menu_page_behaviour">LoginToMainMenuPageBehaviour</link><link linkend="_class_main_menu_page_behavior">MainMenuPageBehavior</link>
<para>Page that contains the 4 buttons, not much to do here, here we should for now load all the attacks of the characters, we do this because we know that when then game gets to the main menu theoeretically all the models should be loaded </para>
<link linkend="_class_menu">Menu</link><link linkend="_class_menu_manager">MenuManager</link><link linkend="_struct_arcade_blobert_actions_contract_1_1_mint_a_m_m_a_struct">ArcadeBlobertActionsContract.MintAMMAStruct</link><link linkend="_struct_arcade_blobert_actions_contract_1_1_mint_struct">ArcadeBlobertActionsContract.MintStruct</link><link linkend="_class_logic_layer_1_1_query_1_1_models">LogicLayer.Query.Models&lt; T &gt;</link><link linkend="_class_mouse_interaction_component">MouseInteractionComponent</link><link linkend="_class_logic_layer_1_1_fetch_blobert_wallet_data_1_1_n_f_t_item">LogicLayer.FetchBlobertWalletData.NFTItem</link>
<para>Represents a single NFT item, including its ID and associated traits </para>
<link linkend="_class_logic_layer_1_1_query_1_1_node">LogicLayer.Query.Node&lt; T &gt;</link><link linkend="_class_notification_component_manager">NotificationComponentManager</link><link linkend="_class_notification_element">NotificationElement</link><link linkend="_struct_notification_component_manager_1_1_notification_object_setup">NotificationComponentManager.NotificationObjectSetup</link><link linkend="_class_on_going_battle_lobby_list_page_elemenet">OnGoingBattleLobbyListPageElemenet</link><link linkend="_class_open_to_invite">OpenToInvite</link><link linkend="_class_planned_attack">PlannedAttack</link><link linkend="_class_planned_attack_1_1_planned_attack_data_query">PlannedAttack.PlannedAttackDataQuery</link><link linkend="_class_player_prefs_utility">PlayerPrefsUtility</link><link linkend="_class_player_tournament_viewer_element">PlayerTournamentViewerElement</link><link linkend="_class_profile_panel">ProfilePanel</link>
<para>Manager class to the player profile panel (wallet / username) </para>
<link linkend="_class_pv_p_challenge_invite">PvPChallengeInvite</link><link linkend="_class_pv_p_challenge_invite_1_1_pv_p_challenge_invite_data_query">PvPChallengeInvite.PvPChallengeInviteDataQuery</link><link linkend="_class_pv_p_challenge_response">PvPChallengeResponse</link><link linkend="_class_pv_p_challenge_score">PvPChallengeScore</link><link linkend="_class_pv_p_challenge_score_1_1_pv_p_challenge_score_data_query">PvPChallengeScore.PvPChallengeScoreDataQuery</link><link linkend="_class_pv_p_combatants">PvPCombatants</link>
<para>PVP combatants holds the 2 combatants as a touple for each combat id </para>
<link linkend="_class_tournament_list_page_behaviour_1_1_querry_result">TournamentListPageBehaviour.QuerryResult</link>
<para><link linkend="_struct_tournament_list_page_behaviour_1_1_data">Data</link> class that matches the JSON format of the data on the backend server </para>
<link linkend="_struct_logic_layer_1_1_combatant_data_model_1_1_query_compiled_combatant_data">LogicLayer.CombatantDataModel.QueryCompiledCombatantData</link>
<para>Struct for better data passing </para>
<link linkend="_struct_logic_layer_1_1_models_1_1_games_data_model_1_1_query_compiled_data">LogicLayer.Models.GamesDataModel.QueryCompiledData</link><link linkend="_class_query_helper">QueryHelper</link><link linkend="_class_quick_leadear_board_element">QuickLeadearBoardElement</link><link linkend="_class_quick_leader_board_component">QuickLeaderBoardComponent</link><link linkend="_class_random_seed">RandomSeed</link><link linkend="_class_random_seed_1_1_random_seed_data_query">RandomSeed.RandomSeedDataQuery</link><link linkend="_class_received_inv_lobby_list_page_element">ReceivedInvLobbyListPageElement</link><link linkend="_struct_pvp_actions_contract_1_1_reject_invite_struct">PvpActionsContract.RejectInviteStruct</link><link linkend="_struct_pvp_actions_contract_1_1_reject_response_struct">PvpActionsContract.RejectResponseStruct</link><link linkend="_struct_pvp_actions_contract_1_1_rescind_invite_struct">PvpActionsContract.RescindInviteStruct</link><link linkend="_struct_pvp_actions_contract_1_1_rescind_response_struct">PvpActionsContract.RescindResponseStruct</link><link linkend="_struct_pvp_actions_contract_1_1_respond_invite_struct">PvpActionsContract.RespondInviteStruct</link><link linkend="_struct_pvp_actions_contract_1_1_reveal_attack_struct">PvpActionsContract.RevealAttackStruct</link><link linkend="_class_rules_page_behaviour">RulesPageBehaviour</link>
<para>Class to define the general behaviour of the Rules page </para>
<link linkend="_struct_pvp_actions_contract_1_1_run_round_struct">PvpActionsContract.RunRoundStruct</link><link linkend="_class_scrolling_text">ScrollingText</link>
<para>Script to be attached to an object, holding a TMP Text component to make that text scrolling when triggered </para>
<link linkend="_struct_seed">Seed</link><link linkend="_class_logic_layer_1_1_query_1_1_seed_data">LogicLayer.Query.SeedData</link><link linkend="_class_select_blob_page_behavior">SelectBlobPageBehavior</link>
<para>This page should only comtaint the blobert dex component and becasue its a componnent all the logic of it is stored on that script </para>
<link linkend="_class_selection_behaviour_text">SelectionBehaviourText</link><link linkend="_class_send_invite_page_behaviour">SendInvitePageBehaviour</link>
<para>This class is responsible for creating a lobby page for the player to invite other players to play with them </para>
<link linkend="_struct_pvp_actions_contract_1_1_send_invite_struct">PvpActionsContract.SendInviteStruct</link><link linkend="_class_settings_panel">SettingsPanel</link>
<para>Manager class to the settings panel (audio levels, muting sounds, etc.) </para>
<link linkend="_struct_pvp_admin_actions_contract_1_1_set_winner_struct">PvpAdminActionsContract.SetWinnerStruct</link><link linkend="_class_blobert_arena_1_1_theme_manager_1_1_skin_listener_component">BlobertArena.ThemeManager.SkinListenerComponent</link><link linkend="_class_blobert_arena_1_1_theme_manager_1_1_skin_manager">BlobertArena.ThemeManager.SkinManager</link><link linkend="_class_ui_components_1_1_slider_1_1_slider_animator_component">UiComponents.Slider.SliderAnimatorComponent</link><link linkend="_class_sound">Sound</link><link linkend="_class_sound_combat_blob_arena">SoundCombatBlobArena</link><link linkend="_class_sound_combat_common">SoundCombatCommon</link><link linkend="_class_sound_combat_special">SoundCombatSpecial</link><link linkend="_class_sound_effect">SoundEffect</link><link linkend="_class_sound_vocals">SoundVocals</link><link linkend="_class_speach_bubble">SpeachBubble</link>
<para>Simple speach bubble script. After instantiation, the bubble is &quot;dormant&quot;, to start it, call either the <link linkend="_class_speach_bubble_1a61fdfbb068cdad7013e8856081ca6795">OneShotInsult()</link> or <link linkend="_class_speach_bubble_1a2d07dc56abd8833df633d7552fab05f1">ContinousInsulting()</link> functions. To configure the lifetime and delay, use the <link linkend="_class_speach_bubble_1ab4d5a973e03afb1a0814eea05fe2d7d1">SetLifetimeAndDelay()</link> function before calling calling any of the starting functions. To stop the insults, call <link linkend="_class_speach_bubble_1a1089ce1202165d1683d19d121738ab19">ResetBubble()</link> </para>
<link linkend="_class_blobert_arena_1_1_blob_dex_1_1_standard_view_no_attacks_blob_dex_component">BlobertArena.BlobDex.StandardViewNoAttacksBlobDexComponent</link><link linkend="_class_logic_layer_1_1_query_1_1_stat_data">LogicLayer.Query.StatData</link><link linkend="_class_logic_layer_1_1_query_1_1_stats_data">LogicLayer.Query.StatsData</link><link linkend="_struct_stats_i8">StatsI8</link><link linkend="_class_switch_component">SwitchComponent</link><link linkend="_class_blobert_arena_1_1_theme_manager_1_1_switch_skin_listener">BlobertArena.ThemeManager.SwitchSkinListener</link><link linkend="_class_logic_layer_1_1_synchro_manager_dojo">LogicLayer.SynchroManagerDojo</link><link linkend="_struct_blobert_arena_1_1_animations_1_1_character_animation_manager_1_1_texture_function_input">BlobertArena.Animations.CharacterAnimationManager.TextureFunctionInput</link>
<para>Represents the input data for a texture function in an animation </para>
<link linkend="_class_blobert_arena_1_1_theme_manager_1_1_themes_manager">BlobertArena.ThemeManager.ThemesManager</link><link linkend="_class_toggle_component">ToggleComponent</link><link linkend="_class_blobert_arena_1_1_theme_manager_1_1_toggle_skin_component">BlobertArena.ThemeManager.ToggleSkinComponent</link><link linkend="_class_logic_layer_1_1_query_1_1_token_trait_data">LogicLayer.Query.TokenTraitData</link><link linkend="_class_top_bar_button_component">TopBarButtonComponent</link><link linkend="_class_tournament_banner_component">TournamentBannerComponent</link><link linkend="_struct_tournament_list_page_behaviour_1_1_tournament_data">TournamentListPageBehaviour.TournamentData</link>
<para>Struct for the tournament data </para>
<link linkend="_class_tournament_details_page_behaviour">TournamentDetailsPageBehaviour</link>
<para>Not too sure what is going on so this will be need to look at </para>
<link linkend="_class_tournament_fight_element">TournamentFightElement</link><link linkend="_class_tournament_list_element">TournamentListElement</link><link linkend="_class_tournament_list_page_behaviour">TournamentListPageBehaviour</link>
<para>Listing all the tournaments, the logic is allready all done i think this page is over maybe just give it a good look before </para>
<link linkend="_class_tournament_lobby_page_behaviour">TournamentLobbyPageBehaviour</link>
<para>This shouldnt exist, this is the same as the otherlobby page just the background and some other basic stuff is changed </para>
<link linkend="_class_tournament_menu_page_behaviour">TournamentMenuPageBehaviour</link><link linkend="_class_tournament_type_selector">TournamentTypeSelector</link>
<para>Manages the tournament type selector and the two selection buttons (Arcade / Ranked) </para>
<link linkend="_struct_blobert_types_1_1_traits">BlobertTypes.Traits</link><link linkend="_class_dojo_contract_communication_1_1_transaction_result">DojoContractCommunication.TransactionResult</link><link linkend="_struct_t_stats">TStats</link><link linkend="_struct_blobert_arena_1_1_animations_1_1_character_animation_manager_1_1_tween_callback_system">BlobertArena.Animations.CharacterAnimationManager.TweenCallbackSystem</link>
<para>Represents a tween callback system for animation frames </para>
<link linkend="_class_typewriter">Typewriter</link>
<para>Add this function to any GameObject that has a TMP_Text component, and then call the <link linkend="_class_typewriter_1a804822a1567a06e38b45491a717c8c9f">SetTextToType()</link> function </para>
<link linkend="_struct_u256">U256</link><link linkend="_class_ui_reference_manager">UiReferenceManager</link><link linkend="_class_ui_state_manager">UiStateManager</link>
<para>Deprecated class was used for debugging purposes but the ticket to make debuggin specific to the page should depricate this </para>
<link linkend="_class_upcoming_features">UpcomingFeatures</link>
<para>Manager class for the upcoming features game object </para>
<link linkend="_class_blobert_arena_1_1_blob_dex_1_1_view_equipped_attacks_blob_dex_component">BlobertArena.BlobDex.ViewEquippedAttacksBlobDexComponent</link><link linkend="_class_blobert_arena_1_1_blob_dex_1_1_view_traits_attack_blob_dex_component">BlobertArena.BlobDex.ViewTraitsAttackBlobDexComponent</link><link linkend="_class_wallet_blobert">WalletBlobert</link><link linkend="_class_wallet_selector">WalletSelector</link>
<para>Class to manage the drop down wallet selector object </para>
<link linkend="_class_logic_layer_1_1_world_manager_dojo">LogicLayer.WorldManagerDojo</link><link linkend="_class_xp_bar">XpBar</link></section>
