<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__xp_bar_8cs_source" xml:lang="en-US">
<title>XpBar.cs</title>
<indexterm><primary>UI/Components/XpBar.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__xp_bar_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;Created&#32;by&#32;Norbert</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00002"/>00002 
<anchor xml:id="__xp_bar_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis>System.Collections;
<anchor xml:id="__xp_bar_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis>UnityEngine;
<anchor xml:id="__xp_bar_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis>TMPro;
<anchor xml:id="__xp_bar_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_system">System</link>;
<anchor xml:id="__xp_bar_8cs_source_1l00007"/>00007 
<anchor xml:id="__xp_bar_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;NOTES:</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00009"/>00009 <emphasis role="comment">//&#32;Instead&#32;of&#32;callbacks,&#32;we&#32;can&#32;create&#32;some&#32;events&#32;for&#32;the&#32;XP-bar,&#32;like&#32;level&#32;up,&#32;or&#32;animation&#32;complete,&#32;which&#32;can&#32;be</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00010"/>00010 <emphasis role="comment">//&#32;subscribed&#32;to,&#32;this&#32;can&#32;help&#32;decuppling&#32;the&#32;components.&#32;Not&#32;a&#32;huge&#32;issue&#32;though,&#32;this&#32;component&#32;only&#32;lives&#32;inside</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00011"/>00011 <emphasis role="comment">//&#32;the&#32;end&#32;of&#32;battle&#32;UI&#32;page,&#32;so&#32;in&#32;theory&#32;this&#32;above&#32;would&#32;only&#32;help&#32;in&#32;making&#32;the&#32;code&#32;a&#32;little&#32;easier&#32;to&#32;read...</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00012"/>00012 
<anchor xml:id="__xp_bar_8cs_source_1l00013"/>00013 
<anchor xml:id="__xp_bar_8cs_source_1l00014"/><link linkend="_class_xp_bar">00014</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_xp_bar">XpBar</link>&#32;:&#32;MonoBehaviour
<anchor xml:id="__xp_bar_8cs_source_1l00015"/>00015 {
<anchor xml:id="__xp_bar_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;[Header&#32;(<emphasis role="stringliteral">&quot;Text&#32;References&quot;</emphasis>)]
<anchor xml:id="__xp_bar_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;TMP_Text&#32;m_XpText;
<anchor xml:id="__xp_bar_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;TMP_Text&#32;m_KeepTrainingText;
<anchor xml:id="__xp_bar_8cs_source_1l00019"/>00019 
<anchor xml:id="__xp_bar_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;[Header(<emphasis role="stringliteral">&quot;XP&#32;Bar&#32;References&quot;</emphasis>)]
<anchor xml:id="__xp_bar_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;RectTransform&#32;m_CurrentXpBar;
<anchor xml:id="__xp_bar_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;RectTransform&#32;m_GainedXpBar;
<anchor xml:id="__xp_bar_8cs_source_1l00023"/>00023 
<anchor xml:id="__xp_bar_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Start()
<anchor xml:id="__xp_bar_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_KeepTrainingText.gameObject.SetActive(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__xp_bar_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00028"/>00028 
<anchor xml:id="__xp_bar_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;
<anchor xml:id="__xp_bar_8cs_source_1l00037"/><link linkend="_class_xp_bar_1ada3e26d418a60624e6338fce196553ff">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_xp_bar_1ada3e26d418a60624e6338fce196553ff">SetXpBar</link>(in&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentXp,&#32;in&#32;<emphasis role="keywordtype">int</emphasis>&#32;gainedXp,&#32;in&#32;<emphasis role="keywordtype">int</emphasis>&#32;toLevelUpXp,&#32;Action&lt;bool&gt;&#32;callback)
<anchor xml:id="__xp_bar_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;instead&#32;of&#32;providing&#32;the&#32;xp&#32;required&#32;to&#32;level&#32;up,&#32;we&#32;can&#32;provide&#32;the&#32;blob&#32;level&#32;instead,&#32;and&#32;look&#32;up</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;necessary&#32;XP&#32;from&#32;an&#32;array&#32;or&#32;something,&#32;this&#32;may&#32;make&#32;things&#32;easier</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__xp_bar_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;currentXpRatio&#32;=&#32;(float)currentXp&#32;/&#32;toLevelUpXp;
<anchor xml:id="__xp_bar_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;gainedXpRatio&#32;=&#32;(float)gainedXp&#32;/&#32;toLevelUpXp;
<anchor xml:id="__xp_bar_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;xpBarSize&#32;=&#32;GetComponent&lt;RectTransform&gt;().sizeDelta.x;
<anchor xml:id="__xp_bar_8cs_source_1l00046"/>00046 
<anchor xml:id="__xp_bar_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_CurrentXpBar.sizeDelta&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(currentXpRatio&#32;*&#32;xpBarSize,&#32;m_CurrentXpBar.sizeDelta.y);
<anchor xml:id="__xp_bar_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GainedXpBar.anchoredPosition&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(currentXpRatio&#32;*&#32;xpBarSize,&#32;m_GainedXpBar.anchoredPosition.y);
<anchor xml:id="__xp_bar_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GainedXpBar.sizeDelta&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(0,&#32;m_GainedXpBar.sizeDelta.y);
<anchor xml:id="__xp_bar_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_XpText.SetText($<emphasis role="stringliteral">&quot;Exp.&#32;+{gainedXp}&quot;</emphasis>);
<anchor xml:id="__xp_bar_8cs_source_1l00051"/>00051 
<anchor xml:id="__xp_bar_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((currentXpRatio&#32;+&#32;gainedXpRatio)&#32;&lt;&#32;1.0f)
<anchor xml:id="__xp_bar_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FillXpBar(<emphasis role="keyword">new</emphasis>(gainedXpRatio&#32;*&#32;xpBarSize,&#32;m_GainedXpBar.sizeDelta.y),&#32;0.5f,&#32;callback);
<anchor xml:id="__xp_bar_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;toLevelUpRatio&#32;=&#32;1.0f&#32;-&#32;currentXpRatio;
<anchor xml:id="__xp_bar_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;remainingXpRatio&#32;=&#32;gainedXpRatio&#32;-&#32;toLevelUpRatio;
<anchor xml:id="__xp_bar_8cs_source_1l00060"/>00060 
<anchor xml:id="__xp_bar_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(LevelUp(toLevelUpRatio&#32;*&#32;xpBarSize,&#32;remainingXpRatio&#32;*&#32;xpBarSize,&#32;callback));
<anchor xml:id="__xp_bar_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__xp_bar_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00064"/>00064 
<anchor xml:id="__xp_bar_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00066"/>00066 
<anchor xml:id="__xp_bar_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;FillXpBar(Vector2&#32;barSize,&#32;<emphasis role="keywordtype">float</emphasis>&#32;delayInSec,&#32;Action&lt;bool&gt;&#32;callback)
<anchor xml:id="__xp_bar_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__xp_bar_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeanTween.size(m_GainedXpBar,&#32;barSize,&#32;1.0f)
<anchor xml:id="__xp_bar_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setDelay(delayInSec)
<anchor xml:id="__xp_bar_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setOnComplete(()&#32;=&gt;&#32;AnimationDone(callback,&#32;<emphasis role="keyword">false</emphasis>));
<anchor xml:id="__xp_bar_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00073"/>00073 
<anchor xml:id="__xp_bar_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AnimationDone(Action&lt;bool&gt;&#32;callback,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;levelUp)
<anchor xml:id="__xp_bar_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(BlinkKeepTraining());
<anchor xml:id="__xp_bar_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callback.Invoke(levelUp);
<anchor xml:id="__xp_bar_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00079"/>00079 
<anchor xml:id="__xp_bar_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;BlinkKeepTraining()
<anchor xml:id="__xp_bar_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__xp_bar_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_KeepTrainingText.gameObject.SetActive(!m_KeepTrainingText.gameObject.activeSelf);
<anchor xml:id="__xp_bar_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForSeconds(0.5f);
<anchor xml:id="__xp_bar_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00088"/>00088 
<anchor xml:id="__xp_bar_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;LevelUp(<emphasis role="keywordtype">float</emphasis>&#32;toLevel,&#32;<emphasis role="keywordtype">float</emphasis>&#32;remainingXp,&#32;Action&lt;bool&gt;&#32;callback)
<anchor xml:id="__xp_bar_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;{
<anchor xml:id="__xp_bar_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;animTime_1&#32;=&#32;toLevel&#32;/&#32;(toLevel&#32;+&#32;remainingXp);
<anchor xml:id="__xp_bar_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;animTime_2&#32;=&#32;1.0f&#32;-&#32;animTime_1;
<anchor xml:id="__xp_bar_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;counter&#32;=&#32;0;
<anchor xml:id="__xp_bar_8cs_source_1l00094"/>00094 
<anchor xml:id="__xp_bar_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fill&#32;the&#32;bar&#32;to&#32;the&#32;end</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeanTween.size(m_GainedXpBar,&#32;<emphasis role="keyword">new</emphasis>(toLevel,&#32;m_GainedXpBar.sizeDelta.y),&#32;animTime_1)
<anchor xml:id="__xp_bar_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setDelay(0.5f)
<anchor xml:id="__xp_bar_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setOnComplete(()=&gt;&#32;++counter);
<anchor xml:id="__xp_bar_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitUntil(()&#32;=&gt;&#32;counter&#32;==&#32;1);
<anchor xml:id="__xp_bar_8cs_source_1l00100"/>00100 
<anchor xml:id="__xp_bar_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Level&#32;up&#32;logic&#32;here...&#32;changing&#32;text,&#32;particle&#32;effects,&#32;etc.</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;LEVEL&#32;UP...&#32;YEEEEAH!&quot;</emphasis>);
<anchor xml:id="__xp_bar_8cs_source_1l00103"/>00103 
<anchor xml:id="__xp_bar_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;the&#32;bars</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_CurrentXpBar.sizeDelta&#32;=&#32;<emphasis role="keyword">new</emphasis>(0,&#32;m_CurrentXpBar.sizeDelta.y);
<anchor xml:id="__xp_bar_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GainedXpBar.sizeDelta&#32;=&#32;<emphasis role="keyword">new</emphasis>(0,&#32;m_GainedXpBar.sizeDelta.y);
<anchor xml:id="__xp_bar_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GainedXpBar.anchoredPosition&#32;=&#32;<emphasis role="keyword">new</emphasis>(m_CurrentXpBar.anchoredPosition.x,&#32;m_GainedXpBar.anchoredPosition.y);
<anchor xml:id="__xp_bar_8cs_source_1l00108"/>00108 
<anchor xml:id="__xp_bar_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fill&#32;the&#32;bar&#32;with&#32;the&#32;remaining&#32;xp</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeanTween.size(m_GainedXpBar,&#32;<emphasis role="keyword">new</emphasis>(remainingXp,&#32;m_GainedXpBar.sizeDelta.y),&#32;animTime_2)
<anchor xml:id="__xp_bar_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setOnComplete(()&#32;=&gt;&#32;++counter);
<anchor xml:id="__xp_bar_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitUntil(()&#32;=&gt;&#32;counter&#32;==&#32;2);
<anchor xml:id="__xp_bar_8cs_source_1l00113"/>00113 
<anchor xml:id="__xp_bar_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;blinking&#32;+&#32;callback</emphasis>
<anchor xml:id="__xp_bar_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AnimationDone(callback,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__xp_bar_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__xp_bar_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;}
<anchor xml:id="__xp_bar_8cs_source_1l00118"/>00118 }
</programlisting></section>
